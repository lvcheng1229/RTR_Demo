#version 120 or 150 compatibility // -*- c++ -*-
#include <compatibility.glsl>
#expect BLOOM

uniform sampler2D   sourceTexture;
uniform float4      g3d_sz2D_sourceTexture;

#if (BLOOM != 0)
    uniform sampler2D bloomTexture;
    uniform float     bloomStrengthScaled;
#endif

uniform float       sensitivity;

/* 1.0 / monitorGamma.  Usually about invGamma = 0.45*/
uniform float       invGamma;

uniform float       vignetteTopStrength;
uniform float       vignetteBottomStrength;
uniform float       vignetteSize;
uniform float       invVignetteSize;
uniform float       toneCurveStrength;

uniform int2        outputSize;
uniform int2        guardBandSize;

uniform sampler2D   toneCurve;

void main(void) {

    int2 X = ivec2(gl_TexCoord[0].st * outputSize) + guardBandSize;

    float3 src = texelFetch(sourceTexture, X, 0).rgb;

    src *= sensitivity;

#   if BLOOM == 1
        // The bloom texture has already been reduced by the guard band size
        float3 bloom = texture2D(bloomTexture, gl_TexCoord[0].st).rgb;
        src += bloom * bloomStrengthScaled;
#   endif

    float2 C = g3d_sz2D_sourceTexture.xy * 0.5;
    float2 delta = (X - C) / length(C);
    float vignette = clamp(1.0 - 
         (length(delta) - (1.0 - vignetteSize)) * invVignetteSize        
         * mix(vignetteTopStrength, vignetteBottomStrength, X.y * g3d_sz2D_sourceTexture.w), 0.0, 1.0);

    src *= vignette;

    // Fix out-of-gamut saturation
    // Maximumum channel:
    float m = max(max(src.r, src.g), max(src.b, 1.0));

    // Normalized color
    src *= (1.0 / m);

    // Fade towards white when the max is brighter than 1.0 (like a light saber core)
    src = mix(src, vec3(1.0), clamp((m - 1.0) * 0.2, 0.0, 1.0));

    // Invert the gamma curve
    float3 dst = pow(src, float3(invGamma));

    // Tone map in sRGB space (like Photoshop Curves).
    float luma = dot(dst, float3(0.2126, 0.7152, 0.0722));
    dst *= (texture2D(toneCurve, float2(luma, 0.5)).r / luma);

    gl_FragColor.rgb = dst;

	// Output luminance in the alpha channel for FXAA 3.11 (which may not be in use) or
    // other algorithms
	gl_FragColor.a =
		// Real CIE luminance:
		//dot(float3(0.2126, 0.7152, 0.0722), dst);

		// Average:
		dot(float3(1.0 / 3.0), dst);

		// Incorrect luminance from FXAA documentation:
	    // dot(dst, float3(0.299, 0.587, 0.114));
}
