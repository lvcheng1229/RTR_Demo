#version 120 or 150 compatibility // -*- c++ -*-
#extension GL_EXT_gpu_shader4 : require

/** \file MotionBlur_tileMax.pix 

    Computes the largest-magnitude velocity in the tile with corner at gl_FragCoord.xy * maxBlurRadius.
    Invoked from MotionBlur::computeTileMax().

    This is run twice, once in each dimension.  It transposes the output from the input, so it doesn't need
    to know which pass number it is in.
*/
#include <compatibility.glsl>

uniform float2      SS_POSITION_CHANGE_readScaleBias;
uniform float2      SS_POSITION_CHANGE_writeScaleBias;
uniform sampler2D   SS_POSITION_CHANGE_buffer;

/** Shift input pixel coordinates by this amount to compensate for the guard band */
uniform vec2        inputShift;

// Expects macro maxBlurRadius;

#if __VERSION__ < 130
#   define tileMax gl_FragColor.rg
#else
    out float2 tileMax;
#endif

void main() {

    float2 m = float2(0.0);
    float largestMagnitude2 = 0.0;


    // Round down to the tile corner.  Note that we're only filtering in the x direction of the source,
    // so the y dimension is unchanged. 
    //
    // Note the transpose relative to the input since the next pass will
    // transpose back for a gather in the other dimension
    int tileCornerX = int(gl_FragCoord.y) * maxBlurRadius + int(inputShift.y);
    int tileRowY    = int(gl_FragCoord.x + inputShift.x);

    // This is relative to the input
    int maxCoordX = textureSize(SS_POSITION_CHANGE_buffer, 0).x - 1 - int(inputShift.x);

    for (int offset = 0; offset < maxBlurRadius; ++offset) { 

        // Point at which we're gathering from
        int2   G = int2(clamp(tileCornerX + offset, inputShift.x, maxCoordX), tileRowY);

        // Velocity at this point
        float2 v_G = texelFetch(SS_POSITION_CHANGE_buffer, G, 0).rg * SS_POSITION_CHANGE_readScaleBias.x + SS_POSITION_CHANGE_readScaleBias.y;

        // Magnitude squared
        float thisMagnitude2 = dot(v_G, v_G);

        if (thisMagnitude2 > largestMagnitude2) {
            // This is the new largest PSF
            m = v_G;
            largestMagnitude2 = thisMagnitude2;
        }
    }
    
    tileMax = m * SS_POSITION_CHANGE_writeScaleBias.x + SS_POSITION_CHANGE_writeScaleBias.y;
}

